
HashMap in Java is a part of the Java Collections Framework and is used to store data in key-value pairs.
Internally, it uses an array of linked lists to store the data efficiently.

1. Basic Structure:

a.Array of buckets:
HashMap uses an array of nodes(buckets). Each bucket is a linked list (or a tree in certain conditions)
where entries with the same hash code are stored. The default capacity of this array is 16.

b. Node class:
Each element in the HashMap is stored in an instance of the Node class, which implements the Map.Entry
interface.A Node contains a key, a value, a hash code, and a reference to the next node in the linked list.

2. Hash Function:
When we insert a key-value pair into the HashMap, Java first computes the hash code of the key using the
key's "hashCode()" method. This hash code is then used to determine the index of the array where the key-value
pair should be stored. The index is calculated using the formula:
                       index=hashcode%array.length

To ensure that the index is within the bounds of the array, Java uses a bitwise AND operation instead of
modulus:

3. Handling Collisions:
 Collisions occur when two different keys produce the same index. In such cases, HashMap uses a linked list
 or a binary tree (from Java 8 onwards) at each index to store multiple entries. If the number of entries
 in a bucket exceeds a certain threshold, the linked list is converted into a binary tree to improve
 performance.

4. Adding Entries:
When adding a new key-value pair:

1.Compute the hash code of the key.
2.Determine the index in the array using the hash code.
3.Check if the key already exists in the bucket at that index.
4.If the key exists, update the value.
5.If the key does not exist, add a new entry to the bucket.

5. Searching for Entries:
When searching for a value by its key:

1.Compute the hash code of the key.
2.Determine the index in the array using the hash code.
3.Traverse the linked list or binary tree at that index to find the key.
4.Return the corresponding value.